========== 
#Прагма Хардстоп 
#Прагма Аргусед 
#Инклудэ <Иостреам.аш> 
#Инклудэ <Стдио.аш> 
#Инклудэ <Конио.аш> 
#Инклудэ <Виндовс.аш> 

Структура Список 
{ 
Инт инфо; 
Список *следующий, *предыдущий; 
} *Бэгин, *Энд, *Тэ; 
//------------------------------------------------------------------------------------------------------------------— 
Ваид Создание(Список**, Список**, инт); 
Ваид Добавление(инт, Список**, Список**); 
Ваид Просмотр(инт, Список*); 
Ваид Удаление(Список**); 
Ваид До_минимального(Список*); 

Ваид Создание(Список **б, Список**е, инт ин) 
{ 
тэ = новый Список; 
тэ -> Инфо = ин; 
тэ -> следующий = тэ -> предыдущий = NULL; 
*б = *e = тэ; 
} 

Ваид Добавление(инт код, Список **б, Список **e, инт ин) 
{ 
Список *тэ = новы Список; 
тэ -> Инфо = ин; 
Если(код == 0) 
{ 
тэ -> предыдущий = 0; // Предыдущего нет 
тэ -> следующий = Бэгин; // Связываем новый элемент с первым 
Бэгин -> предыдущий = тэ; // Изменяем адрес предыдущий бывшего первого 
Бэгин = тэ; // Переставляем указатель Бэгин на новый 

} 
Элсэ 
{ 
тэ -> следующий = 0; // Следующего нет 
тэ -> предыдущий = энд; // Связываем новый с последним 
энд -> следующий = тэ; // Изменяем адрес нэкст бывшего последнего 
энд = тэ; // Изменяем указатель end 

} 
} 


Ваид Просмотр(инт код, Список *тэ) 
{ 
Покуда(тэ != 0) 
{ 
Сиаут « тэ->Инфо « Эндыл; 
Если(код == 0) тэ = тэ->следующий; 
Элсэ тэ = тэ->предыдущий; 
} 
} 


Ваид Удаление(Список** пэ) 
{ 
Покуда(*пэ != 0) 
{ 
тэ = *пэ; 
*пэ = (*пэ) -> следующий; 
Удалить тэ; 
} 
} 



Ваид До_минимального(Список *пэ) 
{ 
Список *тэ = пэ; 
инт минимальный; 
минимальный= пэ->Инфо; 
Покуда( пэ != 0) 
{ 
Если((пэ->Инфо) < минимальный) минимальный=пэ->Инфо; 
пэ=пэ->следующий; 
} 
Сиаут«"\n=========================================================\энВывод элементов до минимального:" «Эндыл; 
Покуда( тэ->Инфо!= минимальный) 
{ 
тэ = Бэгин -> нэкст; 
Удалить Бэгин; 
Бэгин = тэ; 
Сиаут«тэ->Инфо«Эндыл; 
тэ = тэ->следующий; 
} 
Сиаут«"========================================================="« Эндыл; 
} 


Ваид маин() 
{ 
СэтКонсольСпэ(1251); 
СэтКонсольСпэТэАут(1251); 
инт и, ин,эн, код, код1; 
Покуда(тру) 
{ 
Сиаут « "\эн=========================================================\энСоздать список - 1\энДобавить элемент в список- 2\энПросмотреть список - 3\энУдалить список - 4\энИндивидуальное задание(Вариант 6) - 5\энВыход из программы - 0:\эн=========================================================\эн" ; 
Сиин » код; 
Свитч(код) 
{ 
Кейс 1: 
Если(Бэгин != 0) 
{ 
Сиаут « "Сначала очисти память!" « Эндыл; 
Брэак; 
} 
Сиаут « "Создать список, начальный элемент которого = "; Сиин » ин; 
Создание(&Бэгин, &энд, ин); 
Сиаут « "Создали начальный элемент = " « Бэгин -> Инфо « Эндыл; 
Брэак; 
Кейс 2: 
Сиаут « "Введи элемент, который ты хочешь добавить = "; Сиин » ин; 
Сиаут « "Если ты хочешь добавить в начало списка, то нажми - 0\энЕсли ты хочешь добавить в конец списка, то нажми - 1\эн:" ; 
Сиин » код1; 
Добавление(код1, &Бэгин, &энд, ин); 
Если(код1 == 0) 
{ 
тэ = Бэгин; 
Сиаут « "Добавили в начало списка элемент = " « тэ -> Инфо « Эндыл; 
} 
Элсэ 
{ 
тэ = энд; 
Сиаут « "Добавили в конец списка элемент = " « тэ -> Инфо « Эндыл; 
} 
Брэак; 
Кейс 3: 
Если(!Бэгин) 
{ 
Сиаут « "Список пуст!" « Эндыл; 
Брэак; 
} 
Сиаут«"Если ты хочешь просмотреть с начала списка, то нажми - 0\энЕсли ты хочешь просмотреть с конца списка, то нажми - 1\эн:"; 
Сиин » код1; 
Если(код1 == 0) 
{ 
тэ = Бэгин; 
Сиаут «"\nПросмотр списка с начала:" « Эндыл; 
} 
Элсэ { 
тэ = энд; 
Сиаут «"\nПросмотр списка с конца:" « Эндыл; 
} 
Просмотр(код, тэ); 
Брэак; 
Кейс 4: 
Удаление(&Бэгин); 
Сиаут «"Память очищена!"« Эндыл; 
Брэак; 
Кейс 5: 
Сиаут«Эндыл«"Список: "«Эндыл; 
тэ = Бэгин; 
Просмотр(0, тэ); 
До_минимального(Бэгин); 
Брэак; 
Кейс 0: 
Выход(0); 
} 
} 
Гетч(); 
ретурн ; 
}